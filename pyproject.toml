[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "textual-image"
version = "0.6.4"
description = "Render images via Kitty's Terminal Graphics Protocol with Rich and Textual"
authors = [
    {name = "Simon Hayessen", email = "simon@lnqs.io"}
]
readme = "README.md"

classifiers = [
    "Development Status :: 4 - Beta",

    "Intended Audience :: Developers",

    "Environment :: Console",

    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: User Interfaces",

    "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",

    "Operating System :: POSIX :: Linux",

    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
 
    "Typing :: Typed",
]

dependencies = [
    "pillow>=10.3.0",
    "rich>=13.4.0",
]

[project.urls]
Homepage = "https://github.com/lnqs/textual-image"
Documentation = "https://github.com/lnqs/textual-image"
Repository = "https://github.com/lnqs/textual-image"
Issues = "https://github.com/lnqs/textual-image/issues"

[project.optional-dependencies]
textual = [
    "textual>=0.68.0",
]
dev = [
    "mypy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "ruff",
    "syrupy",
    "tox",
    "typing-extensions",
    "typos",
]

[tool.setuptools.packages.find]
include = ["textual_image*"]

[tool.ruff]
lint.select = ["B", "D", "F", "I", "T", "Q"]
lint.ignore = ["B010"]
line-length = 120
exclude = [
    ".env",
    ".git",
    ".venv",
    "__pycache__",
    "env",
    "venv",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
fail_under = 100
exclude_lines = ["if __name__ == .__main__.:", "if sys.platform"]
exclude_also = [
    "no cover: start(?s:.)*?no cover: stop",
    "\\A(?s:.*# pragma: exclude file.*)\\Z"
]

[tool.mypy]
strict = true
warn_unused_ignores = false
exclude = ['build/']

[tool.tox]
isolated_build = true
envlist = ["format-check", "lint", "spell-check", "types", "3.10", "3.11", "3.12", "rich-only"]

[tool.tox.env.format-check]
description = "Format check"
skip_install = true
deps = "ruff"
commands = [["ruff", "format", "--check", "{posargs:.}"]]

[tool.tox.env.lint]
basepython = ["3.12"]
description = "Lint"
skip_install = true
deps = "ruff"
commands = [["ruff", "check", "{posargs:.}"]]

[tool.tox.env.spell-check]
basepython = ["3.12"]
description = "Spell check"
skip_install = true
deps = "typos"
commands = [["typos", "{posargs:.}"]]

[tool.tox.env.types]
basepython = ["3.12"]
description = "Type checking"
deps = ".[textual,dev]"
commands = [["mypy", "{posargs:.}"]]

[tool.tox.env_run_base]
description = "Run tests under {base_python}"
deps = ".[textual,dev]"
commands = [["pytest", "--cov=textual_image", "--cov-report=term-missing", "{tty:--color=yes}", "{posargs}"]]

[tool.tox.env.rich-only]
basepython = ["3.12"]
description = "Test with Rich only"
deps = ".[dev]"
commands = [["pytest", "{tty:--color=yes}", "{posargs}"]]
